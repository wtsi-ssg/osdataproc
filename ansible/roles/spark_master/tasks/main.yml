---

- name: Ensure NFS shared directories are exported
  become: yes
  lineinfile:
          path: /etc/exports
          state: present
          line: "{{ item }}"
  loop:
          - "{{ home }}/data *(rw,sync,no_root_squash,no_subtree_check)"
          - "{{ hadoop_download_dir }} *(rw,sync,no_root_squash,no_subtree_check)"

- name: Start NFS server
  service: name=nfs-server state=started enabled=yes

- name: Start Spark master
  service: name=spark-master state=started enabled=yes

- name: Start Spark history server
  service: name=spark-history-server state=started enabled=yes

- name: Update Python distribution utilities in venv
  become: yes
  become_user: "{{ spark_user }}"
  pip:
    state: latest
    name:
    - pip
    - setuptools
    - wheel
    virtualenv: "{{ venv_dir }}"
    virtualenv_command: /usr/bin/python3 -m venv

- name: Install python modules in venv
  become: yes
  become_user: "{{ spark_user }}"
  pip:
          state: present
          name:
            - "hail=={{ hail_version }}"
            - pyspark
            - jupyterlab==2.2.9
            - pyopenssl
          virtualenv: "{{ venv_dir }}"
          virtualenv_command: /usr/bin/python3 -m venv

- name: Install extra python modules in venv
  become: yes
  become_user: "{{ spark_user }}"
  pip:
          state: present
          name: "{{ extra_python_modules }}"
          virtualenv: "{{ venv_dir }}"
          virtualenv_command: /usr/bin/python3 -m venv

- name: Create Jupyter directories
  file:
          state: directory
          path: "{{ item }}"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"
  loop:
          - "{{ home }}/.jupyter"
          - "{{ home }}/jupyter"

- name: Symlink Jupyter directory in data directory
  file:
          state: link
          src: "{{ home }}/data"
          dest: "{{ home }}/jupyter/working"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"

- name: Stat (potential) Lustre mount point
  stat:
    path: /lustre
  register: lustre

- name: Symlink Lustre mount point in data directory (if it exists)
  file:
    state: link
    src: "/lustre"
    dest: "{{ home }}/jupyter/lustre"
    owner: "{{ spark_user }}"
    group: "{{ spark_group }}"
  when: lustre.stat.exists == True

- name: Generate Jupyter password
  shell: "{{ venv_dir }}/bin/python -c \"from notebook.auth import passwd ; print(passwd('{{ password }}'))\""
  register: jupyter_notebookapp_password

- name: Create Jupyter config file
  become: yes
  template:
          src: jupyter_notebook_config.py.j2
          dest: "{{ home }}/.jupyter/jupyter_notebook_config.py"
          owner: "{{ spark_user }}"
          group: "{{ spark_group }}"

- name: Create Jupyter Lab service
  template: src=jupyter-lab.service.j2 dest=/etc/systemd/system/jupyter-lab.service

- name: Start Jupyter Lab
  service: name=jupyter-lab state=restarted enabled=yes

- name: Ensure ssl directories exist
  file:
          state: directory
          path: "{{ item }}"
          owner: root
          group: root
  loop:
          - /etc/ssl/private
          - /etc/ssl/csr
          - /etc/ssl/crt

- name: Generate OpenSSL private key
  openssl_privatekey:
          path: "{{ ssl_privatekey_path }}"

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
          path: "{{ ssl_csr_path }}"
          privatekey_path: "{{ ssl_privatekey_path }}"
          common_name: osdataproc

- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
          path: "{{ ssl_crt_path }}"
          privatekey_path: "{{ ssl_privatekey_path }}"
          csr_path: "{{ ssl_csr_path }}"
          provider: selfsigned

- name: Configure password authentication for nginx
  become: yes
  htpasswd:
          path: /etc/nginx/passwdfile
          name: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ password }}"
          owner: root
          group: root

- name: Create nginx conf file
  become: yes
  template: src=nginx.conf.j2 dest=/etc/nginx/conf/nginx.conf

- name: Restart nginx
  service: name=nginx state=restarted enabled=yes

- name: Install Netdata
  shell: "cd {{ netdata_dir }} && ./netdata-installer.sh --dont-wait"
